def largest_histogram(histogram):
    """
    Мы будем поддерживать стек, в котором столбцы гистограммы всегда упорядочены по возрастанию.
    Когда мы встречаем столбец, который больше последнего в стеке, мы добавляем его в стек.
    Когда мы встречаем столбец, который меньше последнего в стеке, мы продолжаем удалять столбцы из стека,
    пока не найдем столбец, который меньше текущего, или пока стек не станет пустым.
    Для каждого удаленного столбца мы вычисляем площадь прямоугольника, который можно было бы построить с этим столбцом как самым низким.
    Мы обновляем максимальную площадь, если текущая площадь больше максимальной.
    """
    stack = []
    max_area = 0
    index = 0

    # Проходим через все столбцы гистограммы
    while index < len(histogram):
        # Если стек пуст или текущий столбец выше или равен верхнему столбцу в стеке
        if (not stack) or (histogram[stack[-1]] <= histogram[index]):
            stack.append(index)  # Добавляем индекс столбца в стек
            index += 1  # Переходим к следующему столбцу
        else:
            # Если текущий столбец ниже верхнего столбца в стеке, то мы вычисляем площадь прямоугольника
            top_of_stack = stack.pop()  # Удаляем верхний столбец из стека
            # Вычисляем площадь прямоугольника с удаленным столбцом как самым низким
            area = (histogram[top_of_stack] *
                   ((index - stack[-1] - 1)
                   if stack else index))

            max_area = max(max_area, area)  # Обновляем максимальную площадь, если текущая площадь больше

    # После прохождения всех столбцов, вычисляем площадь прямоугольника для оставшихся столбцов в стеке
    while stack:
        top_of_stack = stack.pop()
        area = (histogram[top_of_stack] *
               ((index - stack[-1] - 1)
               if stack else index))

        max_area = max(max_area, area)

    return max_area  # Возвращаем максимальную площадь

# Test cases
print(largest_histogram([5, 3]))  # Expected output: 6
print(largest_histogram([1, 1, 4, 1]))  # Expected output: 4
print(largest_histogram([1, 1, 3, 1]))  # Expected output: 4
print(largest_histogram([2, 1, 4, 5, 1, 3, 3]))  # Expected output: 8